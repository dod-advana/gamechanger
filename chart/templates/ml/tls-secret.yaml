{{- $ca := genCA "app.ml-ca" 365 }}
{{- $releaseNamespace := .Release.Namespace }}
{{- $clusterDomain := .Values.clusterDomain }}
{{- $serviceName := include "app.ml.name" . }}
{{- $fqdn := include "app.ml.fqdn" . }}
{{- $headlessServiceName := printf "%s-headless" (include "app.ml.name" .) }}
{{- $altNames := list (printf "*.%s.%s.svc.%s" $serviceName $releaseNamespace $clusterDomain) (printf "%s.%s.svc.%s" $serviceName $releaseNamespace $clusterDomain) (printf "*.%s.%s.svc.%s" $headlessServiceName $releaseNamespace $clusterDomain) (printf "%s.%s.svc.%s" $headlessServiceName $releaseNamespace $clusterDomain) "127.0.0.1" "localhost" $fqdn }}
{{- if .Values.ml.tls.certCAFilename }}
{{- $additionalCAs := (.Files.Glob (printf "certs/%s" (.Values.ml.tls.certCAFilename) )) }}
{{- end }}
{{- $crt := genSignedCert $serviceName nil $altNames 365 $ca }}
# nginx requires combining certificates into one file, with the primary cert first
{{- $combinedCerts := printf "%s\n%s" $crt.Cert $ca.Cert }} 
{{- if .Values.ingress.ml.enabled }}
{{- range .Values.ingress.ml.secrets }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ .name }}
  namespace: {{ $.Release.Namespace | quote }}
  labels: {{- include "common.labels.standard" $ | nindent 4 }}
    {{- if $.Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" $.Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
  {{- if $.Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" $.Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
type: kubernetes.io/tls
data:
  tls.crt: {{ .certificate | b64enc }}
  tls.key: {{ .key | b64enc }}
---
{{- end }}
{{- if and .Values.ingress.ml.tls .Values.ingress.ml.selfSigned }}
{{- $cert := genSignedCert .Values.ingress.ml.hostname nil (list .Values.ingress.ml.hostname (include "app.ml.fqdn" .)) 365 $ca }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ printf "%s-tls" (include "app.ml.fqdn" .) }}
  namespace: {{ .Release.Namespace | quote }}
  labels: {{- include "common.labels.standard" . | nindent 4 }}
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
type: kubernetes.io/tls
data:
  tls.crt: {{ $crt.Cert | b64enc | quote }}
  tls.key: {{ $crt.Key | b64enc | quote }}
  ca.crt: {{ $ca.Cert | b64enc | quote }}
{{- end }}
{{- end }}
{{- if and (include "app.ml.createTlsSecret" .) .Values.ml.tls.autoGenerated }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "app.ml.tlsSecretName" . }}
  labels: {{- include "common.labels.standard" . | nindent 4 }}
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
    source: selfsigned
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
type: Opaque
data:
  {{ .Values.web.tls.certFilename }}: {{ $combinedCerts | b64enc }}
  {{ .Values.web.tls.certKeyFilename }}: {{ $crt.Key | b64enc }} 
  {{ .Values.web.tls.certCAFilename }}: {{ $ca.Cert | b64enc }}
{{- else if (include "app.ml.createTlsSecret" .) }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "app.ml.tlsSecretName" . }}
  labels: {{- include "common.labels.standard" . | nindent 4 }}
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
    source: file
  annotations: 
  {{- if .Values.commonAnnotations }}
  {{ include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
type: Opaque
data:
{{ (.Files.Glob (printf "certs/%s" (.Values.ml.tls.certFilename))).AsSecrets | indent 2 }}
{{ (.Files.Glob (printf "certs/%s" (.Values.ml.tls.certKeyFilename))).AsSecrets | indent 2 }}
{{ (.Files.Glob (printf "certs/%s" (.Values.ml.tls.certCAFilename))).AsSecrets | indent 2 }}
{{- end }}