---
services:
  web:
    image: "${GC_WEB_IMAGE}"
    container_name: "${COMPOSE_PROJECT_NAME:-gc}-web"
    user: "1000:1000"
    environment:
      REACT_APP_BACKEND_URL: "http://localhost:8080"
      REACT_APP_GC_DECOUPLED: "true"
      REACT_APP_NODE_ENV: "production"
      REACT_APP_GLUU_SSO: "disabled"
      REACT_APP_MATOMO_LINK: "matomo"
      REACT_APP_DATA_CATALOG_LINK: "http://data-catalog.local:8443"
      REACT_APP_CLASSIFICATION_BANNER: "UNCLASSIFIED"
      REACT_APP_CLASSIFICATION_BANNER_COLOR: "GREEN"
      REACT_APP_MEGA_MENU_ENDPOINT: "http://localhost:8080/api/gamechanger/megamenu/links"
      REACT_APP_TUTORIAL_HREF: "http://localhost:8080"
      REACT_APP_USER_TOKEN_ENDPOINT: "http://localhost:8080/api/auth/token"
      REACT_APP_SUPPORT_HREF: "https://support.local/plugins/servlet/desk/portal/5/create/113"
      REACT_APP_WIKI_HREF: "http://wiki.local"
      REACT_APP_LOGIN_ROUTE: "http://localhost:8080/login"
      GAMECHANGER_DEMO_DEPLOYMENT: "true"
      GAMECHANGER_DEMO_USER: "007"
      GAMECHANGER_DISABLE_STATS_API: "true"
      S3_REGION: "us-east-1"
      S3_IS_MINIO: "true"
      S3_ACCESS_KEY: "dev-access-key"
      S3_SECRET_KEY: "dev-secret-key"
      S3_ENDPOINT: "http://s3-server:9000"
      MYSQL_HOST_MATOMO: "mysql"
      MYSQL_USER_MATOMO: "root"
      MYSQL_PASSWORD_MATOMO: "password"
#      CHOKIDAR_USEPOLLING: "true"
    depends_on:
      - redis
      - postgres
    ports:
      - "8080:8990"
      - "8443:8443"
    networks:
      - app-net
    entrypoint:
      - "/bin/bash"
      - "-ec"
    command:
      - |
        cd /opt/app-root/src/backend
        node index.js

  ml-api:
    image: "${GC_ML_API_IMAGE}"
    container_name: "${COMPOSE_PROJECT_NAME:-gc}-ml-api"
    user: "1000:1000"
    depends_on:
      - redis
    environment:
      ENV_TYPE: "PROD"
      DOWNLOAD_DEP: "false"
      REDIS_HOST: redis
      REDIS_PORT: 6379
      ES_HOST: elasticsearch
      ES_PORT: 9200
      ES_USER: elasticsearch
      ES_PASSWORD: elasticsearch
      GC_WEB_USER: "007"
      GC_WEB_HOST: gc-web
      GC_WEB_PORT: 8080
      GC_WEB_USER: "007"
    ports:
      - "5000:5000"
    volumes:
      - "/mnt/extra/models:/opt/app-root/src/gamechangerml/models:rw"
    networks:
      - app-net

  redis:
    image: "${GC_REDIS_IMAGE}"
    container_name: "${COMPOSE_PROJECT_NAME:-gc}-redis"
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
    ports:
      - "6379:6379"
    volumes:
      - "redis-etc:/usr/local/etc"
      - "redis-data:/data"
    networks:
      - app-net

  neo4j:
    image: "${GC_NEO4J_IMAGE}"
    build:
      context: "./deploy/build/gamechanger-neo4j-plugin/"
      dockerfile: "./docker/debian.Dockerfile"
    container_name: "${COMPOSE_PROJECT_NAME:-gc}-neo4j"
    environment:
      NEO4J_AUTH: "neo4j/password"
    ports:
      - "7687:7687"
      - "7474:7474"
    volumes:
      - "neo4j-data:/neo4j/data"
    networks:
      - app-net

  elasticsearch:
    image: "${GC_ELASTICSEARCH_IMAGE}"
    container_name: "${COMPOSE_PROJECT_NAME:-gc}-elasticsearch"
    user: root
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - "es-data:/usr/share/elasticsearch/data"
    environment:
      discovery.type: single-node
      ELASTIC_PASSWORD: elasticsearch
      ES_JAVA_OPTS: -Xms4096m -Xmx4096m
    networks:
      - app-net

  kibana:
    image: "${GC_KIBANA_IMAGE}"
    container_name: "${COMPOSE_PROJECT_NAME:-gc}-kibana"
    depends_on:
      - elasticsearch
    ports:
      - "5601:5601"
    volumes:
      - ./deploy/docker-compose/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
    environment:
      - KIBANA_SYSTEM_PASSWORD=elasticsearch
    networks:
      - app-net

  s3-server:
    image: "${GC_S3_SERVER_IMAGE}"
    container_name: "${COMPOSE_PROJECT_NAME:-gc}-s3-server"
    user: root
    ports:
      - "9000:9000"
    volumes:
      - "s3-data:/s3-data"
    environment:
      - "MINIO_ACCESS_KEY=dev-access-key"
      - "MINIO_SECRET_KEY=dev-secret-key"
      - "MINIO_REGION_NAME=us-east-1"
    command:
      - server
      - /s3-data
    networks:
      - app-net

  postgres:
    image: "${GC_POSTGRES_IMAGE}"
    container_name: "${COMPOSE_PROJECT_NAME:-gc}-postgres"
    user: root
    ports:
      - "5432:5432"
    volumes:
      - "pg-data:/pg-data"
    environment:
      - "POSTGRES_USER=postgres"
      - "POSTGRES_PASSWORD=password"
      - "POSTGRES_DB=postgres"
      - "PGDATA=/pg-data"
#      - "POSTGRES_HOST_AUTH_METHOD=trust"
    networks:
      - app-net

  data-pipelines:
    image: "${GC_DATA_PIPELINES_IMAGE}"
    container_name: "${COMPOSE_PROJECT_NAME:-gc}-data-pipelines"
    command:
      - "true"

  mysql:
    image: mysql:8.0
    container_name: mysql
    environment:
      - MYSQL_ROOT_PASSWORD=password
      - MYSQL_DATABASE=matomo
    command: --default-authentication-plugin=mysql_native_password
    volumes:
      - mysql:/var/lib/mysql
    restart: always
    networks:
      - app-net

  matomo:
    image: matomo:4.3
    container_name: matomo
    environment:
      - MATOMO_DATABASE_HOST=mysql
      - MATOMO_DATABASE_USERNAME=root
      - MATOMO_DATABASE_PASSWORD=password
      - MATOMO_DATABASE_DBNAME=matomo
    depends_on:
      - mysql
    ports:
      - 80:80
    volumes:
      - matomo:/var/www/html
    networks:
      - app-net

volumes:
    mysql:
    matomo:
